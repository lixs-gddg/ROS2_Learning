// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/ceres_scan_matcher_options_3d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/common/proto/ceres_solver_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto;
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {
class CeresScanMatcherOptions3D;
class CeresScanMatcherOptions3DDefaultTypeInternal;
extern CeresScanMatcherOptions3DDefaultTypeInternal _CeresScanMatcherOptions3D_default_instance_;
class IntensityCostFunctionOptions;
class IntensityCostFunctionOptionsDefaultTypeInternal;
extern IntensityCostFunctionOptionsDefaultTypeInternal _IntensityCostFunctionOptions_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer
PROTOBUF_NAMESPACE_OPEN
template<> ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D* Arena::CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D>(Arena*);
template<> ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* Arena::CreateMaybeMessage<::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cartographer {
namespace mapping {
namespace scan_matching {
namespace proto {

// ===================================================================

class IntensityCostFunctionOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions) */ {
 public:
  inline IntensityCostFunctionOptions() : IntensityCostFunctionOptions(nullptr) {};
  virtual ~IntensityCostFunctionOptions();

  IntensityCostFunctionOptions(const IntensityCostFunctionOptions& from);
  IntensityCostFunctionOptions(IntensityCostFunctionOptions&& from) noexcept
    : IntensityCostFunctionOptions() {
    *this = ::std::move(from);
  }

  inline IntensityCostFunctionOptions& operator=(const IntensityCostFunctionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntensityCostFunctionOptions& operator=(IntensityCostFunctionOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntensityCostFunctionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntensityCostFunctionOptions* internal_default_instance() {
    return reinterpret_cast<const IntensityCostFunctionOptions*>(
               &_IntensityCostFunctionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntensityCostFunctionOptions& a, IntensityCostFunctionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(IntensityCostFunctionOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntensityCostFunctionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntensityCostFunctionOptions* New() const final {
    return CreateMaybeMessage<IntensityCostFunctionOptions>(nullptr);
  }

  IntensityCostFunctionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntensityCostFunctionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntensityCostFunctionOptions& from);
  void MergeFrom(const IntensityCostFunctionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntensityCostFunctionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions";
  }
  protected:
  explicit IntensityCostFunctionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kHuberScaleFieldNumber = 2,
    kIntensityThresholdFieldNumber = 3,
  };
  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // double huber_scale = 2;
  void clear_huber_scale();
  double huber_scale() const;
  void set_huber_scale(double value);
  private:
  double _internal_huber_scale() const;
  void _internal_set_huber_scale(double value);
  public:

  // float intensity_threshold = 3;
  void clear_intensity_threshold();
  float intensity_threshold() const;
  void set_intensity_threshold(float value);
  private:
  float _internal_intensity_threshold() const;
  void _internal_set_intensity_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  double huber_scale_;
  float intensity_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto;
};
// -------------------------------------------------------------------

class CeresScanMatcherOptions3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D) */ {
 public:
  inline CeresScanMatcherOptions3D() : CeresScanMatcherOptions3D(nullptr) {};
  virtual ~CeresScanMatcherOptions3D();

  CeresScanMatcherOptions3D(const CeresScanMatcherOptions3D& from);
  CeresScanMatcherOptions3D(CeresScanMatcherOptions3D&& from) noexcept
    : CeresScanMatcherOptions3D() {
    *this = ::std::move(from);
  }

  inline CeresScanMatcherOptions3D& operator=(const CeresScanMatcherOptions3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline CeresScanMatcherOptions3D& operator=(CeresScanMatcherOptions3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CeresScanMatcherOptions3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CeresScanMatcherOptions3D* internal_default_instance() {
    return reinterpret_cast<const CeresScanMatcherOptions3D*>(
               &_CeresScanMatcherOptions3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CeresScanMatcherOptions3D& a, CeresScanMatcherOptions3D& b) {
    a.Swap(&b);
  }
  inline void Swap(CeresScanMatcherOptions3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CeresScanMatcherOptions3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CeresScanMatcherOptions3D* New() const final {
    return CreateMaybeMessage<CeresScanMatcherOptions3D>(nullptr);
  }

  CeresScanMatcherOptions3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CeresScanMatcherOptions3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CeresScanMatcherOptions3D& from);
  void MergeFrom(const CeresScanMatcherOptions3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CeresScanMatcherOptions3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D";
  }
  protected:
  explicit CeresScanMatcherOptions3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto);
    return ::descriptor_table_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOccupiedSpaceWeightFieldNumber = 1,
    kIntensityCostFunctionOptionsFieldNumber = 7,
    kCeresSolverOptionsFieldNumber = 6,
    kTranslationWeightFieldNumber = 2,
    kRotationWeightFieldNumber = 3,
    kOnlyOptimizeYawFieldNumber = 5,
  };
  // repeated double occupied_space_weight = 1;
  int occupied_space_weight_size() const;
  private:
  int _internal_occupied_space_weight_size() const;
  public:
  void clear_occupied_space_weight();
  private:
  double _internal_occupied_space_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_occupied_space_weight() const;
  void _internal_add_occupied_space_weight(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_occupied_space_weight();
  public:
  double occupied_space_weight(int index) const;
  void set_occupied_space_weight(int index, double value);
  void add_occupied_space_weight(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      occupied_space_weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_occupied_space_weight();

  // repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
  int intensity_cost_function_options_size() const;
  private:
  int _internal_intensity_cost_function_options_size() const;
  public:
  void clear_intensity_cost_function_options();
  ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* mutable_intensity_cost_function_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >*
      mutable_intensity_cost_function_options();
  private:
  const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& _internal_intensity_cost_function_options(int index) const;
  ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* _internal_add_intensity_cost_function_options();
  public:
  const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& intensity_cost_function_options(int index) const;
  ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* add_intensity_cost_function_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >&
      intensity_cost_function_options() const;

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  bool has_ceres_solver_options() const;
  private:
  bool _internal_has_ceres_solver_options() const;
  public:
  void clear_ceres_solver_options();
  const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options() const;
  ::cartographer::common::proto::CeresSolverOptions* release_ceres_solver_options();
  ::cartographer::common::proto::CeresSolverOptions* mutable_ceres_solver_options();
  void set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options);
  private:
  const ::cartographer::common::proto::CeresSolverOptions& _internal_ceres_solver_options() const;
  ::cartographer::common::proto::CeresSolverOptions* _internal_mutable_ceres_solver_options();
  public:
  void unsafe_arena_set_allocated_ceres_solver_options(
      ::cartographer::common::proto::CeresSolverOptions* ceres_solver_options);
  ::cartographer::common::proto::CeresSolverOptions* unsafe_arena_release_ceres_solver_options();

  // double translation_weight = 2;
  void clear_translation_weight();
  double translation_weight() const;
  void set_translation_weight(double value);
  private:
  double _internal_translation_weight() const;
  void _internal_set_translation_weight(double value);
  public:

  // double rotation_weight = 3;
  void clear_rotation_weight();
  double rotation_weight() const;
  void set_rotation_weight(double value);
  private:
  double _internal_rotation_weight() const;
  void _internal_set_rotation_weight(double value);
  public:

  // bool only_optimize_yaw = 5;
  void clear_only_optimize_yaw();
  bool only_optimize_yaw() const;
  void set_only_optimize_yaw(bool value);
  private:
  bool _internal_only_optimize_yaw() const;
  void _internal_set_only_optimize_yaw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > occupied_space_weight_;
  mutable std::atomic<int> _occupied_space_weight_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions > intensity_cost_function_options_;
  ::cartographer::common::proto::CeresSolverOptions* ceres_solver_options_;
  double translation_weight_;
  double rotation_weight_;
  bool only_optimize_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntensityCostFunctionOptions

// double weight = 1;
inline void IntensityCostFunctionOptions::clear_weight() {
  weight_ = 0;
}
inline double IntensityCostFunctionOptions::_internal_weight() const {
  return weight_;
}
inline double IntensityCostFunctionOptions::weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.weight)
  return _internal_weight();
}
inline void IntensityCostFunctionOptions::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void IntensityCostFunctionOptions::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.weight)
}

// double huber_scale = 2;
inline void IntensityCostFunctionOptions::clear_huber_scale() {
  huber_scale_ = 0;
}
inline double IntensityCostFunctionOptions::_internal_huber_scale() const {
  return huber_scale_;
}
inline double IntensityCostFunctionOptions::huber_scale() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.huber_scale)
  return _internal_huber_scale();
}
inline void IntensityCostFunctionOptions::_internal_set_huber_scale(double value) {
  
  huber_scale_ = value;
}
inline void IntensityCostFunctionOptions::set_huber_scale(double value) {
  _internal_set_huber_scale(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.huber_scale)
}

// float intensity_threshold = 3;
inline void IntensityCostFunctionOptions::clear_intensity_threshold() {
  intensity_threshold_ = 0;
}
inline float IntensityCostFunctionOptions::_internal_intensity_threshold() const {
  return intensity_threshold_;
}
inline float IntensityCostFunctionOptions::intensity_threshold() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.intensity_threshold)
  return _internal_intensity_threshold();
}
inline void IntensityCostFunctionOptions::_internal_set_intensity_threshold(float value) {
  
  intensity_threshold_ = value;
}
inline void IntensityCostFunctionOptions::set_intensity_threshold(float value) {
  _internal_set_intensity_threshold(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions.intensity_threshold)
}

// -------------------------------------------------------------------

// CeresScanMatcherOptions3D

// repeated double occupied_space_weight = 1;
inline int CeresScanMatcherOptions3D::_internal_occupied_space_weight_size() const {
  return occupied_space_weight_.size();
}
inline int CeresScanMatcherOptions3D::occupied_space_weight_size() const {
  return _internal_occupied_space_weight_size();
}
inline void CeresScanMatcherOptions3D::clear_occupied_space_weight() {
  occupied_space_weight_.Clear();
}
inline double CeresScanMatcherOptions3D::_internal_occupied_space_weight(int index) const {
  return occupied_space_weight_.Get(index);
}
inline double CeresScanMatcherOptions3D::occupied_space_weight(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return _internal_occupied_space_weight(index);
}
inline void CeresScanMatcherOptions3D::set_occupied_space_weight(int index, double value) {
  occupied_space_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
inline void CeresScanMatcherOptions3D::_internal_add_occupied_space_weight(double value) {
  occupied_space_weight_.Add(value);
}
inline void CeresScanMatcherOptions3D::add_occupied_space_weight(double value) {
  _internal_add_occupied_space_weight(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CeresScanMatcherOptions3D::_internal_occupied_space_weight() const {
  return occupied_space_weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CeresScanMatcherOptions3D::occupied_space_weight() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return _internal_occupied_space_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CeresScanMatcherOptions3D::_internal_mutable_occupied_space_weight() {
  return &occupied_space_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CeresScanMatcherOptions3D::mutable_occupied_space_weight() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.occupied_space_weight)
  return _internal_mutable_occupied_space_weight();
}

// double translation_weight = 2;
inline void CeresScanMatcherOptions3D::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double CeresScanMatcherOptions3D::_internal_translation_weight() const {
  return translation_weight_;
}
inline double CeresScanMatcherOptions3D::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
  return _internal_translation_weight();
}
inline void CeresScanMatcherOptions3D::_internal_set_translation_weight(double value) {
  
  translation_weight_ = value;
}
inline void CeresScanMatcherOptions3D::set_translation_weight(double value) {
  _internal_set_translation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.translation_weight)
}

// double rotation_weight = 3;
inline void CeresScanMatcherOptions3D::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double CeresScanMatcherOptions3D::_internal_rotation_weight() const {
  return rotation_weight_;
}
inline double CeresScanMatcherOptions3D::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
  return _internal_rotation_weight();
}
inline void CeresScanMatcherOptions3D::_internal_set_rotation_weight(double value) {
  
  rotation_weight_ = value;
}
inline void CeresScanMatcherOptions3D::set_rotation_weight(double value) {
  _internal_set_rotation_weight(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.rotation_weight)
}

// bool only_optimize_yaw = 5;
inline void CeresScanMatcherOptions3D::clear_only_optimize_yaw() {
  only_optimize_yaw_ = false;
}
inline bool CeresScanMatcherOptions3D::_internal_only_optimize_yaw() const {
  return only_optimize_yaw_;
}
inline bool CeresScanMatcherOptions3D::only_optimize_yaw() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
  return _internal_only_optimize_yaw();
}
inline void CeresScanMatcherOptions3D::_internal_set_only_optimize_yaw(bool value) {
  
  only_optimize_yaw_ = value;
}
inline void CeresScanMatcherOptions3D::set_only_optimize_yaw(bool value) {
  _internal_set_only_optimize_yaw(value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.only_optimize_yaw)
}

// .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
inline bool CeresScanMatcherOptions3D::_internal_has_ceres_solver_options() const {
  return this != internal_default_instance() && ceres_solver_options_ != nullptr;
}
inline bool CeresScanMatcherOptions3D::has_ceres_solver_options() const {
  return _internal_has_ceres_solver_options();
}
inline const ::cartographer::common::proto::CeresSolverOptions& CeresScanMatcherOptions3D::_internal_ceres_solver_options() const {
  const ::cartographer::common::proto::CeresSolverOptions* p = ceres_solver_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::common::proto::CeresSolverOptions*>(
      &::cartographer::common::proto::_CeresSolverOptions_default_instance_);
}
inline const ::cartographer::common::proto::CeresSolverOptions& CeresScanMatcherOptions3D::ceres_solver_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return _internal_ceres_solver_options();
}
inline void CeresScanMatcherOptions3D::unsafe_arena_set_allocated_ceres_solver_options(
    ::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_solver_options_);
  }
  ceres_solver_options_ = ceres_solver_options;
  if (ceres_solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::release_ceres_solver_options() {
  auto temp = unsafe_arena_release_ceres_solver_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::unsafe_arena_release_ceres_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = ceres_solver_options_;
  ceres_solver_options_ = nullptr;
  return temp;
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::_internal_mutable_ceres_solver_options() {
  
  if (ceres_solver_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::common::proto::CeresSolverOptions>(GetArena());
    ceres_solver_options_ = p;
  }
  return ceres_solver_options_;
}
inline ::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions3D::mutable_ceres_solver_options() {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
  return _internal_mutable_ceres_solver_options();
}
inline void CeresScanMatcherOptions3D::set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_solver_options_);
  }
  if (ceres_solver_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ceres_solver_options)->GetArena();
    if (message_arena != submessage_arena) {
      ceres_solver_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ceres_solver_options, submessage_arena);
    }
    
  } else {
    
  }
  ceres_solver_options_ = ceres_solver_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.ceres_solver_options)
}

// repeated .cartographer.mapping.scan_matching.proto.IntensityCostFunctionOptions intensity_cost_function_options = 7;
inline int CeresScanMatcherOptions3D::_internal_intensity_cost_function_options_size() const {
  return intensity_cost_function_options_.size();
}
inline int CeresScanMatcherOptions3D::intensity_cost_function_options_size() const {
  return _internal_intensity_cost_function_options_size();
}
inline void CeresScanMatcherOptions3D::clear_intensity_cost_function_options() {
  intensity_cost_function_options_.Clear();
}
inline ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* CeresScanMatcherOptions3D::mutable_intensity_cost_function_options(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >*
CeresScanMatcherOptions3D::mutable_intensity_cost_function_options() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return &intensity_cost_function_options_;
}
inline const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& CeresScanMatcherOptions3D::_internal_intensity_cost_function_options(int index) const {
  return intensity_cost_function_options_.Get(index);
}
inline const ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions& CeresScanMatcherOptions3D::intensity_cost_function_options(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return _internal_intensity_cost_function_options(index);
}
inline ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* CeresScanMatcherOptions3D::_internal_add_intensity_cost_function_options() {
  return intensity_cost_function_options_.Add();
}
inline ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions* CeresScanMatcherOptions3D::add_intensity_cost_function_options() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return _internal_add_intensity_cost_function_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cartographer::mapping::scan_matching::proto::IntensityCostFunctionOptions >&
CeresScanMatcherOptions3D::intensity_cost_function_options() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D.intensity_cost_function_options)
  return intensity_cost_function_options_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto
