// generated from rosidl_adapter/resource/msg.idl.em
// with input from cartographer_ros_msgs/msg/Metric.msg
// generated code does not contain a copyright notice

#include "cartographer_ros_msgs/msg/HistogramBucket.idl"
#include "cartographer_ros_msgs/msg/MetricLabel.idl"

module cartographer_ros_msgs {
  module msg {
    module Metric_Constants {
      const uint8 TYPE_COUNTER = 0;
      const uint8 TYPE_GAUGE = 1;
      const uint8 TYPE_HISTOGRAM = 2;
    };
    @verbatim (language="comment", text=
      "2018 The Cartographer Authors" "\n"
      "" "\n"
      "Licensed under the Apache License, Version 2.0 (the \"License\");" "\n"
      "you may not use this file except in compliance with the License." "\n"
      "You may obtain a copy of the License at" "\n"
      "" "\n"
      "     http://www.apache.org/licenses/LICENSE-2.0" "\n"
      "" "\n"
      "Unless required by applicable law or agreed to in writing, software" "\n"
      "distributed under the License is distributed on an \"AS IS\" BASIS," "\n"
      "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." "\n"
      "See the License for the specific language governing permissions and" "\n"
      "limitations under the License.")
    struct Metric {
      uint8 type;

      sequence<cartographer_ros_msgs::msg::MetricLabel> labels;

      @verbatim (language="comment", text=
        "TYPE_COUNTER or TYPE_GAUGE")
      double value;

      @verbatim (language="comment", text=
        "TYPE_HISTOGRAM")
      sequence<cartographer_ros_msgs::msg::HistogramBucket> counts_by_bucket;
    };
  };
};
